//所有变量以$开头
$blue: #000;
div {
	color: $blue;
}
//如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。
$side: left;
.rounded {
	border-#{side}-radius: 5px;
}
$var: 10;
body {
	margin: (14px/2);
	top: 50px + 100px;
	right: $var * 10%;
}
//SASS允许选择器嵌套
/* div h1 {
	color: red;
}  */
div {
	h1 {
		color: red;
	}
}
/* p {
	border-color: red;
} */
p {
	border: {
		color: red;
	}
}
//SASS允许一个选择器，继承另一个选择器
.class1 {
	border: 1px solid #ddd;
}
.class2 {
	@extend .class1;
	font-size: 120%;
}
//Mixin有点像C语言的宏（macro），是可以重用的代码块。
//使用@mixin命令，定义一个代码块。
@mixin left {
	float: left;
	margin-left: 10px;
}
//使用@include命令，调用这个mixin
div {
	@include left;
}
//mixind的强大之处，在于可以指定参数和缺省值
@mixin left($value: 10px) {
	float: left;
	margin-right: $value;
}
//使用的时候，根据需要加入参数
div {
	@include left(20px);
}
//用来生成浏览器前缀
@mixin rounded($vert, $horz, $radius: 10px) {
	border-#{$vert}-#{$horz}-radius: $radius;
	-moz-border-#{$vert}-#{$horz}-radius: $radius;
	-webkit-border-#{vert}-#{$horz}-radius: $radius;
}
#navbar li {
	@include rounded(top, left);
}
#footer {
	@include rounded(top, left, 5px);
}
ul {
	color: lighten(#cc3, 10%);
}
p {
	@if 1+1 == 2 {
		border: 1px solid;
	}
	@if 5 < 3 {
		border: 2px dotted;
	}
}
$color: #ccc;
body{
	@if lightness($color) > 30% {
		background-color: #fff;
	} @else {
		background-color: #fff;
	}
}

@for $i from 1 to 10 {
	.border-#{$i} {
		border: #{$i}px solid blue;
	}
}

$i: 6;
@while $i > 0 {
	.item-#{$i} {
		width: 2em * $i;
	}
	$i: $i - 2;
}

@each $member in a,b,c,d {
	.#{$member} {
		background-image: url("/image/#{$member}.jpg");
	}
}

@function double($n) {
	@return $n * 2;
}
#sidebar {
	width: double(5px);
}
